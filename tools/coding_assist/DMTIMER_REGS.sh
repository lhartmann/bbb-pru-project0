#! /bin/bash
# This table is on the reference manual
AUTHOR=LHARTMANN
Module=DMTimer
SRCPATH=../../include/BBB
FRAMESIZE=0x1000

INSTANCES="\
DMTimer0 0x44E05000
DMTimer1 0x44E31000
DMTimer2 0x48040000
DMTimer3 0x48042000
DMTimer4 0x48044000
DMTimer5 0x48046000
DMTimer6 0x48048000
DMTimer7 0x4804A000"

REGLIST="\
00h	TIDR	4
10h	TIOCP_CFG	4
20h	IRQ_EOI	4
24h	IRQSTATUS_RAW	4
28h	IRQSTATUS	4
2Ch	IRQENABLE_SET	4
30h	IRQENABLE_CLR	4
34h	IRQWAKEEN	4
38h	TCLR	4
3Ch	TCRR	4
40h	TLDR	4
44h	TTGR	4
48h	TWPS	4
4Ch	TMAR	4
50h	TCAR1	4
54h	TSICR	4
58h	TCAR2	4"

uppercase() {
	echo "$1" | tr 'abcdefghijklmnopqrstuvwxyz' 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
}
lowercase() {
	echo "$1" | tr 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz'
}

MODULE=$(uppercase $Module)
module=$(lowercase $Module)

(
	echo "// This file is automatically generated by tools/coding_assist/$MODULE.sh"
	echo "#ifndef ${AUTHOR}_${MODULE}_H"
	echo "#define ${AUTHOR}_${MODULE}_H"
	echo ""
	echo "#include <stdint.h>"
	echo "#include <${MODULE}_bitfields.h>"
	echo ""
	
	echo "$REGLIST" | while read ADDR NAME SIZE; do
		echo "#define ${MODULE}_OFFSET_$NAME 0x${ADDR%h}u"
	done
	echo ""
	
	POS=0
	echo "struct ${module}_regs_t {"
	echo "$REGLIST" | while read ADDR NAME SIZE; do
		OFF=$(( 0x${ADDR%h} ))
		if [[ $OFF != $POS ]]; then
			echo -e "\tuint8_t _rsvd_${POS}[$(( OFF-POS ))];"
		fi
		if grep -q "${NAME}_reg_t" < $SRCPATH/${module}_bitfields.h; then
			echo -e "\t${MODULE}_${NAME}_reg_t $NAME;"
		else 
			if   [ $SIZE -eq 4 ]; then
				echo -e "\tuint32_t $NAME;"
			elif [ $SIZE -eq 2 ]; then
				echo -e "\tuint16_t $NAME;"
			else
				echo "ERROR" >&2
				exit 1
			fi
		fi
		POS=$((OFF+$SIZE));
		echo $POS > /tmp/${module}.framesize
	done
	echo "};"
	echo ""
	echo "#endif"
) > ${module}_structs.h

REALFRAMESIZE=$(cat /tmp/${module}.framesize)
rm -f /tmp/${module}.framesize

# Test function code
(
	echo "// This file is automatically generated by tools/coding_assist/$MODULE.sh"
	echo "#ifndef ${AUTHOR}_${MODULE}_OFFSET_TEST_H"
	echo "#define ${AUTHOR}_${MODULE}_OFFSET_TEST_H"
	echo ""
	echo "#include \"${module}_structs.h\""
	echo ""
	echo '#define fail(XXX) { \'
	echo '	cerr << hex << "Failed offset for " #XXX ". Expected 0x" << '${MODULE}'_OFFSET_##XXX << ", got 0x" << ((uint8_t*)&'${module}'. XXX - (uint8_t*)&'${module}') << "." << endl << dec; \'
	echo '}'

	echo "bool test_${module}_offsets() {"
	echo -e "\t${module}_regs_t ${module};"
	echo -e "\t bool err = false;"
	echo "$REGLIST" | while read ADDR NAME SIZE; do
		echo -e "\tif ((uint8_t*)&${module}.$NAME - (uint8_t*)&${module} != ${MODULE}_OFFSET_$NAME) {"
		echo -e "\t\tfail($NAME);"
		echo -e "\t\terr = true;"
		echo -e "\t}"
	done
	echo -e "\treturn err;"
	echo "}"
	echo "#undef fail"
	echo "#endif"
) > ${module}_test.h

# PRU Linker Script
(
	echo "/* This file is automatically generated by tools/coding_assist/$MODULE.sh */"
	echo -e 'MEMORY {'
	echo -e '\tPAGE 1: /* Data memory */'
	echo "$INSTANCES" | while read Instance POSITION; do
		echo -e "\t$(uppercase $Instance) : origin = ${POSITION}, length = ${REALFRAMESIZE}"
	done
	echo -e '}'

	echo -e 'SECTIONS {'
	echo "$INSTANCES" | while read Instance POSITION; do
		echo -e "\t${Instance}RegsFile : > $(uppercase $Instance), PAGE = 1"
	done
	echo -e '}'
) > ${module}.cmd

# PRU complementary C/C++ header
(
	echo "// This file is automatically generated by tools/coding_assist/$MODULE.sh"
	echo "#ifndef ${AUTHOR}_${MODULE}_H"
	echo "#define ${AUTHOR}_${MODULE}_H"
	echo ""
	echo "#include <BBB/${module}_structs.h>"
	echo ""
	echo "$INSTANCES" | while read Instance POSITION; do
		echo "extern volatile far struct ${module}_regs_t ${Instance}Regs;"
	done
	echo ""
	echo "#endif"
) > ${module}.h

# PRU complementary C/C++ source
(
	echo "// This file is automatically generated by tools/coding_assist/$MODULE.sh"
	echo "//----------------------------------------"
	echo "#include <${module}.h>"
	echo "//----------------------------------------"
	echo "$INSTANCES" | while read Instance POSITION; do
		echo ""
		echo "#ifdef __cplusplus"
		echo "#pragma DATA_SECTION(\""${Instance}RegsFile\"")"
		echo "#else"
		echo "#pragma DATA_SECTION(${Instance}Regs,\"${Instance}RegsFile\");"
		echo "#endif"
		echo "volatile struct ${module}_regs_t ${Instance}Regs;"
	done
	echo ""
	echo "//----------------------------------------"
) > ${module}.cpp

