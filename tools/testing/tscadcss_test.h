// This file is automatically generated by aux/INTC_REGS.sh
#ifndef LHARTMANN_TSCADCSS_OFFSET_TEST_H
#define LHARTMANN_TSCADCSS_OFFSET_TEST_H

#include "tscadcss.h"

#include <iostream>
#include <iomanip>
using namespace std;

#define fail(XXX) { \
	cerr << hex << "Failed offset for " #XXX ". Expected 0x" << TSCADCSS_OFFSET_##XXX << ", got 0x" << ((uint8_t*)&tscadc. XXX - (uint8_t*)&tscadc) << "." << endl << dec; \
}
bool test_tscadc_offsets() {
	tscadcss_regs_t tscadc;
	 bool err = false;
	if ((uint8_t*)&tscadc.REVISION - (uint8_t*)&tscadc != TSCADCSS_OFFSET_REVISION) {
		fail(REVISION);
		err = true;
	}
	if ((uint8_t*)&tscadc.SYSCONFIG - (uint8_t*)&tscadc != TSCADCSS_OFFSET_SYSCONFIG) {
		fail(SYSCONFIG);
		err = true;
	}
	if ((uint8_t*)&tscadc.IRQSTATUS_RAW - (uint8_t*)&tscadc != TSCADCSS_OFFSET_IRQSTATUS_RAW) {
		fail(IRQSTATUS_RAW);
		err = true;
	}
	if ((uint8_t*)&tscadc.IRQSTATUS - (uint8_t*)&tscadc != TSCADCSS_OFFSET_IRQSTATUS) {
		fail(IRQSTATUS);
		err = true;
	}
	if ((uint8_t*)&tscadc.IRQENABLE_SET - (uint8_t*)&tscadc != TSCADCSS_OFFSET_IRQENABLE_SET) {
		fail(IRQENABLE_SET);
		err = true;
	}
	if ((uint8_t*)&tscadc.IRQENABLE_CLR - (uint8_t*)&tscadc != TSCADCSS_OFFSET_IRQENABLE_CLR) {
		fail(IRQENABLE_CLR);
		err = true;
	}
	if ((uint8_t*)&tscadc.IRQWAKEUP - (uint8_t*)&tscadc != TSCADCSS_OFFSET_IRQWAKEUP) {
		fail(IRQWAKEUP);
		err = true;
	}
	if ((uint8_t*)&tscadc.DMAENABLE_SET - (uint8_t*)&tscadc != TSCADCSS_OFFSET_DMAENABLE_SET) {
		fail(DMAENABLE_SET);
		err = true;
	}
	if ((uint8_t*)&tscadc.DMAENABLE_CLR - (uint8_t*)&tscadc != TSCADCSS_OFFSET_DMAENABLE_CLR) {
		fail(DMAENABLE_CLR);
		err = true;
	}
	if ((uint8_t*)&tscadc.CTRL - (uint8_t*)&tscadc != TSCADCSS_OFFSET_CTRL) {
		fail(CTRL);
		err = true;
	}
	if ((uint8_t*)&tscadc.ADCSTAT - (uint8_t*)&tscadc != TSCADCSS_OFFSET_ADCSTAT) {
		fail(ADCSTAT);
		err = true;
	}
	if ((uint8_t*)&tscadc.ADCRANGE - (uint8_t*)&tscadc != TSCADCSS_OFFSET_ADCRANGE) {
		fail(ADCRANGE);
		err = true;
	}
	if ((uint8_t*)&tscadc.ADC_CLKDIV - (uint8_t*)&tscadc != TSCADCSS_OFFSET_ADC_CLKDIV) {
		fail(ADC_CLKDIV);
		err = true;
	}
	if ((uint8_t*)&tscadc.ADC_MISC - (uint8_t*)&tscadc != TSCADCSS_OFFSET_ADC_MISC) {
		fail(ADC_MISC);
		err = true;
	}
	if ((uint8_t*)&tscadc.STEPENABLE - (uint8_t*)&tscadc != TSCADCSS_OFFSET_STEPENABLE) {
		fail(STEPENABLE);
		err = true;
	}
	if ((uint8_t*)&tscadc.IDLECONFIG - (uint8_t*)&tscadc != TSCADCSS_OFFSET_IDLECONFIG) {
		fail(IDLECONFIG);
		err = true;
	}
	if ((uint8_t*)&tscadc.TS_CHARGE_STEPCONFIG - (uint8_t*)&tscadc != TSCADCSS_OFFSET_TS_CHARGE_STEPCONFIG) {
		fail(TS_CHARGE_STEPCONFIG);
		err = true;
	}
	if ((uint8_t*)&tscadc.TS_CHARGE_DELAY - (uint8_t*)&tscadc != TSCADCSS_OFFSET_TS_CHARGE_DELAY) {
		fail(TS_CHARGE_DELAY);
		err = true;
	}
	if ((uint8_t*)&tscadc.STEPCONFIG1 - (uint8_t*)&tscadc != TSCADCSS_OFFSET_STEPCONFIG1) {
		fail(STEPCONFIG1);
		err = true;
	}
	if ((uint8_t*)&tscadc.STEPDELAY1 - (uint8_t*)&tscadc != TSCADCSS_OFFSET_STEPDELAY1) {
		fail(STEPDELAY1);
		err = true;
	}
	if ((uint8_t*)&tscadc.STEPCONFIG2 - (uint8_t*)&tscadc != TSCADCSS_OFFSET_STEPCONFIG2) {
		fail(STEPCONFIG2);
		err = true;
	}
	if ((uint8_t*)&tscadc.STEPDELAY2 - (uint8_t*)&tscadc != TSCADCSS_OFFSET_STEPDELAY2) {
		fail(STEPDELAY2);
		err = true;
	}
	if ((uint8_t*)&tscadc.STEPCONFIG3 - (uint8_t*)&tscadc != TSCADCSS_OFFSET_STEPCONFIG3) {
		fail(STEPCONFIG3);
		err = true;
	}
	if ((uint8_t*)&tscadc.STEPDELAY3 - (uint8_t*)&tscadc != TSCADCSS_OFFSET_STEPDELAY3) {
		fail(STEPDELAY3);
		err = true;
	}
	if ((uint8_t*)&tscadc.STEPCONFIG4 - (uint8_t*)&tscadc != TSCADCSS_OFFSET_STEPCONFIG4) {
		fail(STEPCONFIG4);
		err = true;
	}
	if ((uint8_t*)&tscadc.STEPDELAY4 - (uint8_t*)&tscadc != TSCADCSS_OFFSET_STEPDELAY4) {
		fail(STEPDELAY4);
		err = true;
	}
	if ((uint8_t*)&tscadc.STEPCONFIG5 - (uint8_t*)&tscadc != TSCADCSS_OFFSET_STEPCONFIG5) {
		fail(STEPCONFIG5);
		err = true;
	}
	if ((uint8_t*)&tscadc.STEPDELAY5 - (uint8_t*)&tscadc != TSCADCSS_OFFSET_STEPDELAY5) {
		fail(STEPDELAY5);
		err = true;
	}
	if ((uint8_t*)&tscadc.STEPCONFIG6 - (uint8_t*)&tscadc != TSCADCSS_OFFSET_STEPCONFIG6) {
		fail(STEPCONFIG6);
		err = true;
	}
	if ((uint8_t*)&tscadc.STEPDELAY6 - (uint8_t*)&tscadc != TSCADCSS_OFFSET_STEPDELAY6) {
		fail(STEPDELAY6);
		err = true;
	}
	if ((uint8_t*)&tscadc.STEPCONFIG7 - (uint8_t*)&tscadc != TSCADCSS_OFFSET_STEPCONFIG7) {
		fail(STEPCONFIG7);
		err = true;
	}
	if ((uint8_t*)&tscadc.STEPDELAY7 - (uint8_t*)&tscadc != TSCADCSS_OFFSET_STEPDELAY7) {
		fail(STEPDELAY7);
		err = true;
	}
	if ((uint8_t*)&tscadc.STEPCONFIG8 - (uint8_t*)&tscadc != TSCADCSS_OFFSET_STEPCONFIG8) {
		fail(STEPCONFIG8);
		err = true;
	}
	if ((uint8_t*)&tscadc.STEPDELAY8 - (uint8_t*)&tscadc != TSCADCSS_OFFSET_STEPDELAY8) {
		fail(STEPDELAY8);
		err = true;
	}
	if ((uint8_t*)&tscadc.STEPCONFIG9 - (uint8_t*)&tscadc != TSCADCSS_OFFSET_STEPCONFIG9) {
		fail(STEPCONFIG9);
		err = true;
	}
	if ((uint8_t*)&tscadc.STEPDELAY9 - (uint8_t*)&tscadc != TSCADCSS_OFFSET_STEPDELAY9) {
		fail(STEPDELAY9);
		err = true;
	}
	if ((uint8_t*)&tscadc.STEPCONFIG10 - (uint8_t*)&tscadc != TSCADCSS_OFFSET_STEPCONFIG10) {
		fail(STEPCONFIG10);
		err = true;
	}
	if ((uint8_t*)&tscadc.STEPDELAY10 - (uint8_t*)&tscadc != TSCADCSS_OFFSET_STEPDELAY10) {
		fail(STEPDELAY10);
		err = true;
	}
	if ((uint8_t*)&tscadc.STEPCONFIG11 - (uint8_t*)&tscadc != TSCADCSS_OFFSET_STEPCONFIG11) {
		fail(STEPCONFIG11);
		err = true;
	}
	if ((uint8_t*)&tscadc.STEPDELAY11 - (uint8_t*)&tscadc != TSCADCSS_OFFSET_STEPDELAY11) {
		fail(STEPDELAY11);
		err = true;
	}
	if ((uint8_t*)&tscadc.STEPCONFIG12 - (uint8_t*)&tscadc != TSCADCSS_OFFSET_STEPCONFIG12) {
		fail(STEPCONFIG12);
		err = true;
	}
	if ((uint8_t*)&tscadc.STEPDELAY12 - (uint8_t*)&tscadc != TSCADCSS_OFFSET_STEPDELAY12) {
		fail(STEPDELAY12);
		err = true;
	}
	if ((uint8_t*)&tscadc.STEPCONFIG13 - (uint8_t*)&tscadc != TSCADCSS_OFFSET_STEPCONFIG13) {
		fail(STEPCONFIG13);
		err = true;
	}
	if ((uint8_t*)&tscadc.STEPDELAY13 - (uint8_t*)&tscadc != TSCADCSS_OFFSET_STEPDELAY13) {
		fail(STEPDELAY13);
		err = true;
	}
	if ((uint8_t*)&tscadc.STEPCONFIG14 - (uint8_t*)&tscadc != TSCADCSS_OFFSET_STEPCONFIG14) {
		fail(STEPCONFIG14);
		err = true;
	}
	if ((uint8_t*)&tscadc.STEPDELAY14 - (uint8_t*)&tscadc != TSCADCSS_OFFSET_STEPDELAY14) {
		fail(STEPDELAY14);
		err = true;
	}
	if ((uint8_t*)&tscadc.STEPCONFIG15 - (uint8_t*)&tscadc != TSCADCSS_OFFSET_STEPCONFIG15) {
		fail(STEPCONFIG15);
		err = true;
	}
	if ((uint8_t*)&tscadc.STEPDELAY15 - (uint8_t*)&tscadc != TSCADCSS_OFFSET_STEPDELAY15) {
		fail(STEPDELAY15);
		err = true;
	}
	if ((uint8_t*)&tscadc.STEPCONFIG16 - (uint8_t*)&tscadc != TSCADCSS_OFFSET_STEPCONFIG16) {
		fail(STEPCONFIG16);
		err = true;
	}
	if ((uint8_t*)&tscadc.STEPDELAY16 - (uint8_t*)&tscadc != TSCADCSS_OFFSET_STEPDELAY16) {
		fail(STEPDELAY16);
		err = true;
	}
	if ((uint8_t*)&tscadc.FIFO0COUNT - (uint8_t*)&tscadc != TSCADCSS_OFFSET_FIFO0COUNT) {
		fail(FIFO0COUNT);
		err = true;
	}
	if ((uint8_t*)&tscadc.FIFO0THRESHOLD - (uint8_t*)&tscadc != TSCADCSS_OFFSET_FIFO0THRESHOLD) {
		fail(FIFO0THRESHOLD);
		err = true;
	}
	if ((uint8_t*)&tscadc.DMA0REQ - (uint8_t*)&tscadc != TSCADCSS_OFFSET_DMA0REQ) {
		fail(DMA0REQ);
		err = true;
	}
	if ((uint8_t*)&tscadc.FIFO1COUNT - (uint8_t*)&tscadc != TSCADCSS_OFFSET_FIFO1COUNT) {
		fail(FIFO1COUNT);
		err = true;
	}
	if ((uint8_t*)&tscadc.FIFO1THRESHOLD - (uint8_t*)&tscadc != TSCADCSS_OFFSET_FIFO1THRESHOLD) {
		fail(FIFO1THRESHOLD);
		err = true;
	}
	if ((uint8_t*)&tscadc.DMA1REQ - (uint8_t*)&tscadc != TSCADCSS_OFFSET_DMA1REQ) {
		fail(DMA1REQ);
		err = true;
	}
	if ((uint8_t*)&tscadc.FIFO0DATA - (uint8_t*)&tscadc != TSCADCSS_OFFSET_FIFO0DATA) {
		fail(FIFO0DATA);
		err = true;
	}
	if ((uint8_t*)&tscadc.FIFO1DATA - (uint8_t*)&tscadc != TSCADCSS_OFFSET_FIFO1DATA) {
		fail(FIFO1DATA);
		err = true;
	}
	return err;
}
#undef fail

#endif
