// This file is automatically generated by aux/PWMSS.sh
#ifndef FILIPEBELO_PWMSS_ECAP_OFFSET_TEST_H
#define FILIPEBELO_PWMSS_ECAP_OFFSET_TEST_H

#include "pwmss_ecap.h"

#define fail(XXX) { \
	cerr << hex << "Failed offset for " #XXX ". Expected 0x" << PWMSS_ECAP_OFFSET_##XXX << ", got 0x" << ((uint8_t*)&ecap. XXX - (uint8_t*)&ecap) << "." << endl << dec; \
}
bool test_pwmss_ecap_offsets() {
	pwmss_ecap_regs_t ecap;
	 bool err = false;
	if ((uint8_t*)&ecap.TSCTR - (uint8_t*)&ecap != PWMSS_ECAP_OFFSET_TSCTR) {
		fail(TSCTR);
		err = true;
	}
	if ((uint8_t*)&ecap.CTRPHS - (uint8_t*)&ecap != PWMSS_ECAP_OFFSET_CTRPHS) {
		fail(CTRPHS);
		err = true;
	}
	if ((uint8_t*)&ecap.CAP1 - (uint8_t*)&ecap != PWMSS_ECAP_OFFSET_CAP1) {
		fail(CAP1);
		err = true;
	}
	if ((uint8_t*)&ecap.CAP2 - (uint8_t*)&ecap != PWMSS_ECAP_OFFSET_CAP2) {
		fail(CAP2);
		err = true;
	}
	if ((uint8_t*)&ecap.CAP3 - (uint8_t*)&ecap != PWMSS_ECAP_OFFSET_CAP3) {
		fail(CAP3);
		err = true;
	}
	if ((uint8_t*)&ecap.CAP4 - (uint8_t*)&ecap != PWMSS_ECAP_OFFSET_CAP4) {
		fail(CAP4);
		err = true;
	}
	if ((uint8_t*)&ecap.ECCTL1 - (uint8_t*)&ecap != PWMSS_ECAP_OFFSET_ECCTL1) {
		fail(ECCTL1);
		err = true;
	}
	if ((uint8_t*)&ecap.ECCTL2 - (uint8_t*)&ecap != PWMSS_ECAP_OFFSET_ECCTL2) {
		fail(ECCTL2);
		err = true;
	}
	if ((uint8_t*)&ecap.ECEINT - (uint8_t*)&ecap != PWMSS_ECAP_OFFSET_ECEINT) {
		fail(ECEINT);
		err = true;
	}
	if ((uint8_t*)&ecap.ECFLG - (uint8_t*)&ecap != PWMSS_ECAP_OFFSET_ECFLG) {
		fail(ECFLG);
		err = true;
	}
	if ((uint8_t*)&ecap.ECCLR - (uint8_t*)&ecap != PWMSS_ECAP_OFFSET_ECCLR) {
		fail(ECCLR);
		err = true;
	}
	if ((uint8_t*)&ecap.ECFRC - (uint8_t*)&ecap != PWMSS_ECAP_OFFSET_ECFRC) {
		fail(ECFRC);
		err = true;
	}
	if ((uint8_t*)&ecap.REVID - (uint8_t*)&ecap != PWMSS_ECAP_OFFSET_REVID) {
		fail(REVID);
		err = true;
	}
	return err;
}
#undef fail

#endif
