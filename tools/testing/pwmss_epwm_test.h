// This file is automatically generated by aux/PWMSS.sh
#ifndef FILIPEBELO_PWMSS_EPWM_OFFSET_TEST_H
#define FILIPEBELO_PWMSS_EPWM_OFFSET_TEST_H

#include "pwmss_epwm.h"

#define fail(XXX) { \
	cerr << hex << "Failed offset for " #XXX ". Expected 0x" << PWMSS_EPWM_OFFSET_##XXX << ", got 0x" << ((uint8_t*)&epwm. XXX - (uint8_t*)&epwm) << "." << endl << dec; \
}
bool test_pwmss_epwm_offsets() {
	pwmss_epwm_regs_t epwm;
	 bool err = false;
	if ((uint8_t*)&epwm.TBCTL - (uint8_t*)&epwm != PWMSS_EPWM_OFFSET_TBCTL) {
		fail(TBCTL);
		err = true;
	}
	if ((uint8_t*)&epwm.TBSTS - (uint8_t*)&epwm != PWMSS_EPWM_OFFSET_TBSTS) {
		fail(TBSTS);
		err = true;
	}
	if ((uint8_t*)&epwm.TBPHSHR - (uint8_t*)&epwm != PWMSS_EPWM_OFFSET_TBPHSHR) {
		fail(TBPHSHR);
		err = true;
	}
	if ((uint8_t*)&epwm.TBPHS - (uint8_t*)&epwm != PWMSS_EPWM_OFFSET_TBPHS) {
		fail(TBPHS);
		err = true;
	}
	if ((uint8_t*)&epwm.TBCNT - (uint8_t*)&epwm != PWMSS_EPWM_OFFSET_TBCNT) {
		fail(TBCNT);
		err = true;
	}
	if ((uint8_t*)&epwm.TBPRD - (uint8_t*)&epwm != PWMSS_EPWM_OFFSET_TBPRD) {
		fail(TBPRD);
		err = true;
	}
	if ((uint8_t*)&epwm.CMPCTL - (uint8_t*)&epwm != PWMSS_EPWM_OFFSET_CMPCTL) {
		fail(CMPCTL);
		err = true;
	}
	if ((uint8_t*)&epwm.CMPAHR - (uint8_t*)&epwm != PWMSS_EPWM_OFFSET_CMPAHR) {
		fail(CMPAHR);
		err = true;
	}
	if ((uint8_t*)&epwm.CMPA - (uint8_t*)&epwm != PWMSS_EPWM_OFFSET_CMPA) {
		fail(CMPA);
		err = true;
	}
	if ((uint8_t*)&epwm.CMPB - (uint8_t*)&epwm != PWMSS_EPWM_OFFSET_CMPB) {
		fail(CMPB);
		err = true;
	}
	if ((uint8_t*)&epwm.AQCTLA - (uint8_t*)&epwm != PWMSS_EPWM_OFFSET_AQCTLA) {
		fail(AQCTLA);
		err = true;
	}
	if ((uint8_t*)&epwm.AQCTLB - (uint8_t*)&epwm != PWMSS_EPWM_OFFSET_AQCTLB) {
		fail(AQCTLB);
		err = true;
	}
	if ((uint8_t*)&epwm.AQSFRC - (uint8_t*)&epwm != PWMSS_EPWM_OFFSET_AQSFRC) {
		fail(AQSFRC);
		err = true;
	}
	if ((uint8_t*)&epwm.AQCSFRC - (uint8_t*)&epwm != PWMSS_EPWM_OFFSET_AQCSFRC) {
		fail(AQCSFRC);
		err = true;
	}
	if ((uint8_t*)&epwm.DBCTL - (uint8_t*)&epwm != PWMSS_EPWM_OFFSET_DBCTL) {
		fail(DBCTL);
		err = true;
	}
	if ((uint8_t*)&epwm.DBRED - (uint8_t*)&epwm != PWMSS_EPWM_OFFSET_DBRED) {
		fail(DBRED);
		err = true;
	}
	if ((uint8_t*)&epwm.DBFED - (uint8_t*)&epwm != PWMSS_EPWM_OFFSET_DBFED) {
		fail(DBFED);
		err = true;
	}
	if ((uint8_t*)&epwm.TZSEL - (uint8_t*)&epwm != PWMSS_EPWM_OFFSET_TZSEL) {
		fail(TZSEL);
		err = true;
	}
	if ((uint8_t*)&epwm.TZCTL - (uint8_t*)&epwm != PWMSS_EPWM_OFFSET_TZCTL) {
		fail(TZCTL);
		err = true;
	}
	if ((uint8_t*)&epwm.TZEINT - (uint8_t*)&epwm != PWMSS_EPWM_OFFSET_TZEINT) {
		fail(TZEINT);
		err = true;
	}
	if ((uint8_t*)&epwm.TZFLG - (uint8_t*)&epwm != PWMSS_EPWM_OFFSET_TZFLG) {
		fail(TZFLG);
		err = true;
	}
	if ((uint8_t*)&epwm.TZCLR - (uint8_t*)&epwm != PWMSS_EPWM_OFFSET_TZCLR) {
		fail(TZCLR);
		err = true;
	}
	if ((uint8_t*)&epwm.TZFRC - (uint8_t*)&epwm != PWMSS_EPWM_OFFSET_TZFRC) {
		fail(TZFRC);
		err = true;
	}
	if ((uint8_t*)&epwm.ETSEL - (uint8_t*)&epwm != PWMSS_EPWM_OFFSET_ETSEL) {
		fail(ETSEL);
		err = true;
	}
	if ((uint8_t*)&epwm.ETPS - (uint8_t*)&epwm != PWMSS_EPWM_OFFSET_ETPS) {
		fail(ETPS);
		err = true;
	}
	if ((uint8_t*)&epwm.ETFLG - (uint8_t*)&epwm != PWMSS_EPWM_OFFSET_ETFLG) {
		fail(ETFLG);
		err = true;
	}
	if ((uint8_t*)&epwm.ETCLR - (uint8_t*)&epwm != PWMSS_EPWM_OFFSET_ETCLR) {
		fail(ETCLR);
		err = true;
	}
	if ((uint8_t*)&epwm.ETFRC - (uint8_t*)&epwm != PWMSS_EPWM_OFFSET_ETFRC) {
		fail(ETFRC);
		err = true;
	}
	if ((uint8_t*)&epwm.PCCTL - (uint8_t*)&epwm != PWMSS_EPWM_OFFSET_PCCTL) {
		fail(PCCTL);
		err = true;
	}
	if ((uint8_t*)&epwm.HRCTL - (uint8_t*)&epwm != PWMSS_EPWM_OFFSET_HRCTL) {
		fail(HRCTL);
		err = true;
	}
	return err;
}
#undef fail

#endif
